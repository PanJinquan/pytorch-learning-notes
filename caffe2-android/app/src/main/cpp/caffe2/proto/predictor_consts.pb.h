// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/predictor_consts.proto

#ifndef PROTOBUF_caffe2_2fproto_2fpredictor_5fconsts_2eproto__INCLUDED
#define PROTOBUF_caffe2_2fproto_2fpredictor_5fconsts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_caffe2_2fproto_2fpredictor_5fconsts_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPredictorConstsImpl();
void InitDefaultsPredictorConsts();
inline void InitDefaults() {
  InitDefaultsPredictorConsts();
}
}  // namespace protobuf_caffe2_2fproto_2fpredictor_5fconsts_2eproto
namespace caffe2 {
class PredictorConsts;
class PredictorConstsDefaultTypeInternal;
extern PredictorConstsDefaultTypeInternal _PredictorConsts_default_instance_;
}  // namespace caffe2
namespace caffe2 {

// ===================================================================

class PredictorConsts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.PredictorConsts) */ {
 public:
  PredictorConsts();
  virtual ~PredictorConsts();

  PredictorConsts(const PredictorConsts& from);

  inline PredictorConsts& operator=(const PredictorConsts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictorConsts(PredictorConsts&& from) noexcept
    : PredictorConsts() {
    *this = ::std::move(from);
  }

  inline PredictorConsts& operator=(PredictorConsts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictorConsts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorConsts* internal_default_instance() {
    return reinterpret_cast<const PredictorConsts*>(
               &_PredictorConsts_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PredictorConsts* other);
  friend void swap(PredictorConsts& a, PredictorConsts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictorConsts* New() const PROTOBUF_FINAL { return New(NULL); }

  PredictorConsts* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PredictorConsts& from);
  void MergeFrom(const PredictorConsts& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PredictorConsts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  bool has_meta_net_def() const;
  void clear_meta_net_def();
  static const int kMETANETDEFFieldNumber = 1;
  const ::std::string& meta_net_def() const;
  void set_meta_net_def(const ::std::string& value);
  #if LANG_CXX11
  void set_meta_net_def(::std::string&& value);
  #endif
  void set_meta_net_def(const char* value);
  void set_meta_net_def(const char* value, size_t size);
  ::std::string* mutable_meta_net_def();
  ::std::string* release_meta_net_def();
  void set_allocated_meta_net_def(::std::string* meta_net_def);

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  bool has_predictor_dbreader() const;
  void clear_predictor_dbreader();
  static const int kPREDICTORDBREADERFieldNumber = 2;
  const ::std::string& predictor_dbreader() const;
  void set_predictor_dbreader(const ::std::string& value);
  #if LANG_CXX11
  void set_predictor_dbreader(::std::string&& value);
  #endif
  void set_predictor_dbreader(const char* value);
  void set_predictor_dbreader(const char* value, size_t size);
  ::std::string* mutable_predictor_dbreader();
  ::std::string* release_predictor_dbreader();
  void set_allocated_predictor_dbreader(::std::string* predictor_dbreader);

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  bool has_parameters_blob_type() const;
  void clear_parameters_blob_type();
  static const int kPARAMETERSBLOBTYPEFieldNumber = 3;
  const ::std::string& parameters_blob_type() const;
  void set_parameters_blob_type(const ::std::string& value);
  #if LANG_CXX11
  void set_parameters_blob_type(::std::string&& value);
  #endif
  void set_parameters_blob_type(const char* value);
  void set_parameters_blob_type(const char* value, size_t size);
  ::std::string* mutable_parameters_blob_type();
  ::std::string* release_parameters_blob_type();
  void set_allocated_parameters_blob_type(::std::string* parameters_blob_type);

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  bool has_inputs_blob_type() const;
  void clear_inputs_blob_type();
  static const int kINPUTSBLOBTYPEFieldNumber = 4;
  const ::std::string& inputs_blob_type() const;
  void set_inputs_blob_type(const ::std::string& value);
  #if LANG_CXX11
  void set_inputs_blob_type(::std::string&& value);
  #endif
  void set_inputs_blob_type(const char* value);
  void set_inputs_blob_type(const char* value, size_t size);
  ::std::string* mutable_inputs_blob_type();
  ::std::string* release_inputs_blob_type();
  void set_allocated_inputs_blob_type(::std::string* inputs_blob_type);

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  bool has_outputs_blob_type() const;
  void clear_outputs_blob_type();
  static const int kOUTPUTSBLOBTYPEFieldNumber = 5;
  const ::std::string& outputs_blob_type() const;
  void set_outputs_blob_type(const ::std::string& value);
  #if LANG_CXX11
  void set_outputs_blob_type(::std::string&& value);
  #endif
  void set_outputs_blob_type(const char* value);
  void set_outputs_blob_type(const char* value, size_t size);
  ::std::string* mutable_outputs_blob_type();
  ::std::string* release_outputs_blob_type();
  void set_allocated_outputs_blob_type(::std::string* outputs_blob_type);

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  bool has_global_init_net_type() const;
  void clear_global_init_net_type();
  static const int kGLOBALINITNETTYPEFieldNumber = 6;
  const ::std::string& global_init_net_type() const;
  void set_global_init_net_type(const ::std::string& value);
  #if LANG_CXX11
  void set_global_init_net_type(::std::string&& value);
  #endif
  void set_global_init_net_type(const char* value);
  void set_global_init_net_type(const char* value, size_t size);
  ::std::string* mutable_global_init_net_type();
  ::std::string* release_global_init_net_type();
  void set_allocated_global_init_net_type(::std::string* global_init_net_type);

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  bool has_predict_init_net_type() const;
  void clear_predict_init_net_type();
  static const int kPREDICTINITNETTYPEFieldNumber = 7;
  const ::std::string& predict_init_net_type() const;
  void set_predict_init_net_type(const ::std::string& value);
  #if LANG_CXX11
  void set_predict_init_net_type(::std::string&& value);
  #endif
  void set_predict_init_net_type(const char* value);
  void set_predict_init_net_type(const char* value, size_t size);
  ::std::string* mutable_predict_init_net_type();
  ::std::string* release_predict_init_net_type();
  void set_allocated_predict_init_net_type(::std::string* predict_init_net_type);

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  bool has_predict_net_type() const;
  void clear_predict_net_type();
  static const int kPREDICTNETTYPEFieldNumber = 8;
  const ::std::string& predict_net_type() const;
  void set_predict_net_type(const ::std::string& value);
  #if LANG_CXX11
  void set_predict_net_type(::std::string&& value);
  #endif
  void set_predict_net_type(const char* value);
  void set_predict_net_type(const char* value, size_t size);
  ::std::string* mutable_predict_net_type();
  ::std::string* release_predict_net_type();
  void set_allocated_predict_net_type(::std::string* predict_net_type);

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  bool has_single_predictor() const;
  void clear_single_predictor();
  static const int kSINGLEPREDICTORFieldNumber = 9;
  const ::std::string& single_predictor() const;
  void set_single_predictor(const ::std::string& value);
  #if LANG_CXX11
  void set_single_predictor(::std::string&& value);
  #endif
  void set_single_predictor(const char* value);
  void set_single_predictor(const char* value, size_t size);
  ::std::string* mutable_single_predictor();
  ::std::string* release_single_predictor();
  void set_allocated_single_predictor(::std::string* single_predictor);

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  bool has_multi_predictor() const;
  void clear_multi_predictor();
  static const int kMULTIPREDICTORFieldNumber = 10;
  const ::std::string& multi_predictor() const;
  void set_multi_predictor(const ::std::string& value);
  #if LANG_CXX11
  void set_multi_predictor(::std::string&& value);
  #endif
  void set_multi_predictor(const char* value);
  void set_multi_predictor(const char* value, size_t size);
  ::std::string* mutable_multi_predictor();
  ::std::string* release_multi_predictor();
  void set_allocated_multi_predictor(::std::string* multi_predictor);

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  bool has_train_init_plan_type() const;
  void clear_train_init_plan_type();
  static const int kTRAININITPLANTYPEFieldNumber = 11;
  const ::std::string& train_init_plan_type() const;
  void set_train_init_plan_type(const ::std::string& value);
  #if LANG_CXX11
  void set_train_init_plan_type(::std::string&& value);
  #endif
  void set_train_init_plan_type(const char* value);
  void set_train_init_plan_type(const char* value, size_t size);
  ::std::string* mutable_train_init_plan_type();
  ::std::string* release_train_init_plan_type();
  void set_allocated_train_init_plan_type(::std::string* train_init_plan_type);

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  bool has_train_plan_type() const;
  void clear_train_plan_type();
  static const int kTRAINPLANTYPEFieldNumber = 12;
  const ::std::string& train_plan_type() const;
  void set_train_plan_type(const ::std::string& value);
  #if LANG_CXX11
  void set_train_plan_type(::std::string&& value);
  #endif
  void set_train_plan_type(const char* value);
  void set_train_plan_type(const char* value, size_t size);
  ::std::string* mutable_train_plan_type();
  ::std::string* release_train_plan_type();
  void set_allocated_train_plan_type(::std::string* train_plan_type);

  // @@protoc_insertion_point(class_scope:caffe2.PredictorConsts)
 private:
  void set_has_meta_net_def();
  void clear_has_meta_net_def();
  void set_has_predictor_dbreader();
  void clear_has_predictor_dbreader();
  void set_has_parameters_blob_type();
  void clear_has_parameters_blob_type();
  void set_has_inputs_blob_type();
  void clear_has_inputs_blob_type();
  void set_has_outputs_blob_type();
  void clear_has_outputs_blob_type();
  void set_has_global_init_net_type();
  void clear_has_global_init_net_type();
  void set_has_predict_init_net_type();
  void clear_has_predict_init_net_type();
  void set_has_predict_net_type();
  void clear_has_predict_net_type();
  void set_has_single_predictor();
  void clear_has_single_predictor();
  void set_has_multi_predictor();
  void clear_has_multi_predictor();
  void set_has_train_init_plan_type();
  void clear_has_train_init_plan_type();
  void set_has_train_plan_type();
  void clear_has_train_plan_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_meta_net_def_;
  ::google::protobuf::internal::ArenaStringPtr meta_net_def_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_predictor_dbreader_;
  ::google::protobuf::internal::ArenaStringPtr predictor_dbreader_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_parameters_blob_type_;
  ::google::protobuf::internal::ArenaStringPtr parameters_blob_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_inputs_blob_type_;
  ::google::protobuf::internal::ArenaStringPtr inputs_blob_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_outputs_blob_type_;
  ::google::protobuf::internal::ArenaStringPtr outputs_blob_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_global_init_net_type_;
  ::google::protobuf::internal::ArenaStringPtr global_init_net_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_predict_init_net_type_;
  ::google::protobuf::internal::ArenaStringPtr predict_init_net_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_predict_net_type_;
  ::google::protobuf::internal::ArenaStringPtr predict_net_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_single_predictor_;
  ::google::protobuf::internal::ArenaStringPtr single_predictor_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_multi_predictor_;
  ::google::protobuf::internal::ArenaStringPtr multi_predictor_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_train_init_plan_type_;
  ::google::protobuf::internal::ArenaStringPtr train_init_plan_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_train_plan_type_;
  ::google::protobuf::internal::ArenaStringPtr train_plan_type_;
  friend struct ::protobuf_caffe2_2fproto_2fpredictor_5fconsts_2eproto::TableStruct;
  friend void ::protobuf_caffe2_2fproto_2fpredictor_5fconsts_2eproto::InitDefaultsPredictorConstsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PredictorConsts

// optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
inline bool PredictorConsts::has_meta_net_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PredictorConsts::set_has_meta_net_def() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PredictorConsts::clear_has_meta_net_def() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PredictorConsts::clear_meta_net_def() {
  meta_net_def_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_meta_net_def_.get());
  clear_has_meta_net_def();
}
inline const ::std::string& PredictorConsts::meta_net_def() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.META_NET_DEF)
  return meta_net_def_.GetNoArena();
}
inline void PredictorConsts::set_meta_net_def(const ::std::string& value) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(&::caffe2::PredictorConsts::_default_meta_net_def_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.META_NET_DEF)
}
#if LANG_CXX11
inline void PredictorConsts::set_meta_net_def(::std::string&& value) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(
    &::caffe2::PredictorConsts::_default_meta_net_def_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.META_NET_DEF)
}
#endif
inline void PredictorConsts::set_meta_net_def(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(&::caffe2::PredictorConsts::_default_meta_net_def_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.META_NET_DEF)
}
inline void PredictorConsts::set_meta_net_def(const char* value, size_t size) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(&::caffe2::PredictorConsts::_default_meta_net_def_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.META_NET_DEF)
}
inline ::std::string* PredictorConsts::mutable_meta_net_def() {
  set_has_meta_net_def();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.META_NET_DEF)
  return meta_net_def_.MutableNoArena(&::caffe2::PredictorConsts::_default_meta_net_def_.get());
}
inline ::std::string* PredictorConsts::release_meta_net_def() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.META_NET_DEF)
  clear_has_meta_net_def();
  return meta_net_def_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_meta_net_def_.get());
}
inline void PredictorConsts::set_allocated_meta_net_def(::std::string* meta_net_def) {
  if (meta_net_def != NULL) {
    set_has_meta_net_def();
  } else {
    clear_has_meta_net_def();
  }
  meta_net_def_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_meta_net_def_.get(), meta_net_def);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.META_NET_DEF)
}

// optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
inline bool PredictorConsts::has_predictor_dbreader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PredictorConsts::set_has_predictor_dbreader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PredictorConsts::clear_has_predictor_dbreader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PredictorConsts::clear_predictor_dbreader() {
  predictor_dbreader_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_predictor_dbreader_.get());
  clear_has_predictor_dbreader();
}
inline const ::std::string& PredictorConsts::predictor_dbreader() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return predictor_dbreader_.GetNoArena();
}
inline void PredictorConsts::set_predictor_dbreader(const ::std::string& value) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(&::caffe2::PredictorConsts::_default_predictor_dbreader_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
#if LANG_CXX11
inline void PredictorConsts::set_predictor_dbreader(::std::string&& value) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(
    &::caffe2::PredictorConsts::_default_predictor_dbreader_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
#endif
inline void PredictorConsts::set_predictor_dbreader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(&::caffe2::PredictorConsts::_default_predictor_dbreader_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline void PredictorConsts::set_predictor_dbreader(const char* value, size_t size) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(&::caffe2::PredictorConsts::_default_predictor_dbreader_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline ::std::string* PredictorConsts::mutable_predictor_dbreader() {
  set_has_predictor_dbreader();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return predictor_dbreader_.MutableNoArena(&::caffe2::PredictorConsts::_default_predictor_dbreader_.get());
}
inline ::std::string* PredictorConsts::release_predictor_dbreader() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  clear_has_predictor_dbreader();
  return predictor_dbreader_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_predictor_dbreader_.get());
}
inline void PredictorConsts::set_allocated_predictor_dbreader(::std::string* predictor_dbreader) {
  if (predictor_dbreader != NULL) {
    set_has_predictor_dbreader();
  } else {
    clear_has_predictor_dbreader();
  }
  predictor_dbreader_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_predictor_dbreader_.get(), predictor_dbreader);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}

// optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
inline bool PredictorConsts::has_parameters_blob_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PredictorConsts::set_has_parameters_blob_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PredictorConsts::clear_has_parameters_blob_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PredictorConsts::clear_parameters_blob_type() {
  parameters_blob_type_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_parameters_blob_type_.get());
  clear_has_parameters_blob_type();
}
inline const ::std::string& PredictorConsts::parameters_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return parameters_blob_type_.GetNoArena();
}
inline void PredictorConsts::set_parameters_blob_type(const ::std::string& value) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_parameters_blob_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
#if LANG_CXX11
inline void PredictorConsts::set_parameters_blob_type(::std::string&& value) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(
    &::caffe2::PredictorConsts::_default_parameters_blob_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
#endif
inline void PredictorConsts::set_parameters_blob_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_parameters_blob_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline void PredictorConsts::set_parameters_blob_type(const char* value, size_t size) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_parameters_blob_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline ::std::string* PredictorConsts::mutable_parameters_blob_type() {
  set_has_parameters_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return parameters_blob_type_.MutableNoArena(&::caffe2::PredictorConsts::_default_parameters_blob_type_.get());
}
inline ::std::string* PredictorConsts::release_parameters_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  clear_has_parameters_blob_type();
  return parameters_blob_type_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_parameters_blob_type_.get());
}
inline void PredictorConsts::set_allocated_parameters_blob_type(::std::string* parameters_blob_type) {
  if (parameters_blob_type != NULL) {
    set_has_parameters_blob_type();
  } else {
    clear_has_parameters_blob_type();
  }
  parameters_blob_type_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_parameters_blob_type_.get(), parameters_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}

// optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
inline bool PredictorConsts::has_inputs_blob_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PredictorConsts::set_has_inputs_blob_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PredictorConsts::clear_has_inputs_blob_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PredictorConsts::clear_inputs_blob_type() {
  inputs_blob_type_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_inputs_blob_type_.get());
  clear_has_inputs_blob_type();
}
inline const ::std::string& PredictorConsts::inputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return inputs_blob_type_.GetNoArena();
}
inline void PredictorConsts::set_inputs_blob_type(const ::std::string& value) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_inputs_blob_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
#if LANG_CXX11
inline void PredictorConsts::set_inputs_blob_type(::std::string&& value) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(
    &::caffe2::PredictorConsts::_default_inputs_blob_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
#endif
inline void PredictorConsts::set_inputs_blob_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_inputs_blob_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_inputs_blob_type(const char* value, size_t size) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_inputs_blob_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline ::std::string* PredictorConsts::mutable_inputs_blob_type() {
  set_has_inputs_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return inputs_blob_type_.MutableNoArena(&::caffe2::PredictorConsts::_default_inputs_blob_type_.get());
}
inline ::std::string* PredictorConsts::release_inputs_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  clear_has_inputs_blob_type();
  return inputs_blob_type_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_inputs_blob_type_.get());
}
inline void PredictorConsts::set_allocated_inputs_blob_type(::std::string* inputs_blob_type) {
  if (inputs_blob_type != NULL) {
    set_has_inputs_blob_type();
  } else {
    clear_has_inputs_blob_type();
  }
  inputs_blob_type_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_inputs_blob_type_.get(), inputs_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}

// optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
inline bool PredictorConsts::has_outputs_blob_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PredictorConsts::set_has_outputs_blob_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PredictorConsts::clear_has_outputs_blob_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PredictorConsts::clear_outputs_blob_type() {
  outputs_blob_type_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_outputs_blob_type_.get());
  clear_has_outputs_blob_type();
}
inline const ::std::string& PredictorConsts::outputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return outputs_blob_type_.GetNoArena();
}
inline void PredictorConsts::set_outputs_blob_type(const ::std::string& value) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_outputs_blob_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
#if LANG_CXX11
inline void PredictorConsts::set_outputs_blob_type(::std::string&& value) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(
    &::caffe2::PredictorConsts::_default_outputs_blob_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
#endif
inline void PredictorConsts::set_outputs_blob_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_outputs_blob_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_outputs_blob_type(const char* value, size_t size) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(&::caffe2::PredictorConsts::_default_outputs_blob_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline ::std::string* PredictorConsts::mutable_outputs_blob_type() {
  set_has_outputs_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return outputs_blob_type_.MutableNoArena(&::caffe2::PredictorConsts::_default_outputs_blob_type_.get());
}
inline ::std::string* PredictorConsts::release_outputs_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  clear_has_outputs_blob_type();
  return outputs_blob_type_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_outputs_blob_type_.get());
}
inline void PredictorConsts::set_allocated_outputs_blob_type(::std::string* outputs_blob_type) {
  if (outputs_blob_type != NULL) {
    set_has_outputs_blob_type();
  } else {
    clear_has_outputs_blob_type();
  }
  outputs_blob_type_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_outputs_blob_type_.get(), outputs_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}

// optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
inline bool PredictorConsts::has_global_init_net_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PredictorConsts::set_has_global_init_net_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PredictorConsts::clear_has_global_init_net_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PredictorConsts::clear_global_init_net_type() {
  global_init_net_type_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_global_init_net_type_.get());
  clear_has_global_init_net_type();
}
inline const ::std::string& PredictorConsts::global_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return global_init_net_type_.GetNoArena();
}
inline void PredictorConsts::set_global_init_net_type(const ::std::string& value) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_global_init_net_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
#if LANG_CXX11
inline void PredictorConsts::set_global_init_net_type(::std::string&& value) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(
    &::caffe2::PredictorConsts::_default_global_init_net_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
#endif
inline void PredictorConsts::set_global_init_net_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_global_init_net_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline void PredictorConsts::set_global_init_net_type(const char* value, size_t size) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_global_init_net_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline ::std::string* PredictorConsts::mutable_global_init_net_type() {
  set_has_global_init_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return global_init_net_type_.MutableNoArena(&::caffe2::PredictorConsts::_default_global_init_net_type_.get());
}
inline ::std::string* PredictorConsts::release_global_init_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  clear_has_global_init_net_type();
  return global_init_net_type_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_global_init_net_type_.get());
}
inline void PredictorConsts::set_allocated_global_init_net_type(::std::string* global_init_net_type) {
  if (global_init_net_type != NULL) {
    set_has_global_init_net_type();
  } else {
    clear_has_global_init_net_type();
  }
  global_init_net_type_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_global_init_net_type_.get(), global_init_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}

// optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
inline bool PredictorConsts::has_predict_init_net_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PredictorConsts::set_has_predict_init_net_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PredictorConsts::clear_has_predict_init_net_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PredictorConsts::clear_predict_init_net_type() {
  predict_init_net_type_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_predict_init_net_type_.get());
  clear_has_predict_init_net_type();
}
inline const ::std::string& PredictorConsts::predict_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return predict_init_net_type_.GetNoArena();
}
inline void PredictorConsts::set_predict_init_net_type(const ::std::string& value) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_predict_init_net_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
#if LANG_CXX11
inline void PredictorConsts::set_predict_init_net_type(::std::string&& value) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(
    &::caffe2::PredictorConsts::_default_predict_init_net_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
#endif
inline void PredictorConsts::set_predict_init_net_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_predict_init_net_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline void PredictorConsts::set_predict_init_net_type(const char* value, size_t size) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_predict_init_net_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline ::std::string* PredictorConsts::mutable_predict_init_net_type() {
  set_has_predict_init_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return predict_init_net_type_.MutableNoArena(&::caffe2::PredictorConsts::_default_predict_init_net_type_.get());
}
inline ::std::string* PredictorConsts::release_predict_init_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  clear_has_predict_init_net_type();
  return predict_init_net_type_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_predict_init_net_type_.get());
}
inline void PredictorConsts::set_allocated_predict_init_net_type(::std::string* predict_init_net_type) {
  if (predict_init_net_type != NULL) {
    set_has_predict_init_net_type();
  } else {
    clear_has_predict_init_net_type();
  }
  predict_init_net_type_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_predict_init_net_type_.get(), predict_init_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}

// optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
inline bool PredictorConsts::has_predict_net_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PredictorConsts::set_has_predict_net_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PredictorConsts::clear_has_predict_net_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PredictorConsts::clear_predict_net_type() {
  predict_net_type_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_predict_net_type_.get());
  clear_has_predict_net_type();
}
inline const ::std::string& PredictorConsts::predict_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return predict_net_type_.GetNoArena();
}
inline void PredictorConsts::set_predict_net_type(const ::std::string& value) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_predict_net_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
#if LANG_CXX11
inline void PredictorConsts::set_predict_net_type(::std::string&& value) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(
    &::caffe2::PredictorConsts::_default_predict_net_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
#endif
inline void PredictorConsts::set_predict_net_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_predict_net_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline void PredictorConsts::set_predict_net_type(const char* value, size_t size) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(&::caffe2::PredictorConsts::_default_predict_net_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline ::std::string* PredictorConsts::mutable_predict_net_type() {
  set_has_predict_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return predict_net_type_.MutableNoArena(&::caffe2::PredictorConsts::_default_predict_net_type_.get());
}
inline ::std::string* PredictorConsts::release_predict_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  clear_has_predict_net_type();
  return predict_net_type_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_predict_net_type_.get());
}
inline void PredictorConsts::set_allocated_predict_net_type(::std::string* predict_net_type) {
  if (predict_net_type != NULL) {
    set_has_predict_net_type();
  } else {
    clear_has_predict_net_type();
  }
  predict_net_type_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_predict_net_type_.get(), predict_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}

// optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
inline bool PredictorConsts::has_single_predictor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PredictorConsts::set_has_single_predictor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PredictorConsts::clear_has_single_predictor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PredictorConsts::clear_single_predictor() {
  single_predictor_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_single_predictor_.get());
  clear_has_single_predictor();
}
inline const ::std::string& PredictorConsts::single_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return single_predictor_.GetNoArena();
}
inline void PredictorConsts::set_single_predictor(const ::std::string& value) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(&::caffe2::PredictorConsts::_default_single_predictor_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
#if LANG_CXX11
inline void PredictorConsts::set_single_predictor(::std::string&& value) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(
    &::caffe2::PredictorConsts::_default_single_predictor_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
#endif
inline void PredictorConsts::set_single_predictor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_single_predictor();
  single_predictor_.SetNoArena(&::caffe2::PredictorConsts::_default_single_predictor_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline void PredictorConsts::set_single_predictor(const char* value, size_t size) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(&::caffe2::PredictorConsts::_default_single_predictor_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline ::std::string* PredictorConsts::mutable_single_predictor() {
  set_has_single_predictor();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return single_predictor_.MutableNoArena(&::caffe2::PredictorConsts::_default_single_predictor_.get());
}
inline ::std::string* PredictorConsts::release_single_predictor() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  clear_has_single_predictor();
  return single_predictor_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_single_predictor_.get());
}
inline void PredictorConsts::set_allocated_single_predictor(::std::string* single_predictor) {
  if (single_predictor != NULL) {
    set_has_single_predictor();
  } else {
    clear_has_single_predictor();
  }
  single_predictor_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_single_predictor_.get(), single_predictor);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}

// optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
inline bool PredictorConsts::has_multi_predictor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PredictorConsts::set_has_multi_predictor() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PredictorConsts::clear_has_multi_predictor() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PredictorConsts::clear_multi_predictor() {
  multi_predictor_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_multi_predictor_.get());
  clear_has_multi_predictor();
}
inline const ::std::string& PredictorConsts::multi_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return multi_predictor_.GetNoArena();
}
inline void PredictorConsts::set_multi_predictor(const ::std::string& value) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(&::caffe2::PredictorConsts::_default_multi_predictor_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
#if LANG_CXX11
inline void PredictorConsts::set_multi_predictor(::std::string&& value) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(
    &::caffe2::PredictorConsts::_default_multi_predictor_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
#endif
inline void PredictorConsts::set_multi_predictor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(&::caffe2::PredictorConsts::_default_multi_predictor_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline void PredictorConsts::set_multi_predictor(const char* value, size_t size) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(&::caffe2::PredictorConsts::_default_multi_predictor_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline ::std::string* PredictorConsts::mutable_multi_predictor() {
  set_has_multi_predictor();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return multi_predictor_.MutableNoArena(&::caffe2::PredictorConsts::_default_multi_predictor_.get());
}
inline ::std::string* PredictorConsts::release_multi_predictor() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.MULTI_PREDICTOR)
  clear_has_multi_predictor();
  return multi_predictor_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_multi_predictor_.get());
}
inline void PredictorConsts::set_allocated_multi_predictor(::std::string* multi_predictor) {
  if (multi_predictor != NULL) {
    set_has_multi_predictor();
  } else {
    clear_has_multi_predictor();
  }
  multi_predictor_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_multi_predictor_.get(), multi_predictor);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.MULTI_PREDICTOR)
}

// optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
inline bool PredictorConsts::has_train_init_plan_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PredictorConsts::set_has_train_init_plan_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PredictorConsts::clear_has_train_init_plan_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PredictorConsts::clear_train_init_plan_type() {
  train_init_plan_type_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_train_init_plan_type_.get());
  clear_has_train_init_plan_type();
}
inline const ::std::string& PredictorConsts::train_init_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return train_init_plan_type_.GetNoArena();
}
inline void PredictorConsts::set_train_init_plan_type(const ::std::string& value) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(&::caffe2::PredictorConsts::_default_train_init_plan_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
#if LANG_CXX11
inline void PredictorConsts::set_train_init_plan_type(::std::string&& value) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(
    &::caffe2::PredictorConsts::_default_train_init_plan_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
#endif
inline void PredictorConsts::set_train_init_plan_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(&::caffe2::PredictorConsts::_default_train_init_plan_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline void PredictorConsts::set_train_init_plan_type(const char* value, size_t size) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(&::caffe2::PredictorConsts::_default_train_init_plan_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline ::std::string* PredictorConsts::mutable_train_init_plan_type() {
  set_has_train_init_plan_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return train_init_plan_type_.MutableNoArena(&::caffe2::PredictorConsts::_default_train_init_plan_type_.get());
}
inline ::std::string* PredictorConsts::release_train_init_plan_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  clear_has_train_init_plan_type();
  return train_init_plan_type_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_train_init_plan_type_.get());
}
inline void PredictorConsts::set_allocated_train_init_plan_type(::std::string* train_init_plan_type) {
  if (train_init_plan_type != NULL) {
    set_has_train_init_plan_type();
  } else {
    clear_has_train_init_plan_type();
  }
  train_init_plan_type_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_train_init_plan_type_.get(), train_init_plan_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}

// optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
inline bool PredictorConsts::has_train_plan_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PredictorConsts::set_has_train_plan_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PredictorConsts::clear_has_train_plan_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PredictorConsts::clear_train_plan_type() {
  train_plan_type_.ClearToDefaultNoArena(&::caffe2::PredictorConsts::_default_train_plan_type_.get());
  clear_has_train_plan_type();
}
inline const ::std::string& PredictorConsts::train_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return train_plan_type_.GetNoArena();
}
inline void PredictorConsts::set_train_plan_type(const ::std::string& value) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(&::caffe2::PredictorConsts::_default_train_plan_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
#if LANG_CXX11
inline void PredictorConsts::set_train_plan_type(::std::string&& value) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(
    &::caffe2::PredictorConsts::_default_train_plan_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
#endif
inline void PredictorConsts::set_train_plan_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(&::caffe2::PredictorConsts::_default_train_plan_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline void PredictorConsts::set_train_plan_type(const char* value, size_t size) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(&::caffe2::PredictorConsts::_default_train_plan_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline ::std::string* PredictorConsts::mutable_train_plan_type() {
  set_has_train_plan_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return train_plan_type_.MutableNoArena(&::caffe2::PredictorConsts::_default_train_plan_type_.get());
}
inline ::std::string* PredictorConsts::release_train_plan_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  clear_has_train_plan_type();
  return train_plan_type_.ReleaseNoArena(&::caffe2::PredictorConsts::_default_train_plan_type_.get());
}
inline void PredictorConsts::set_allocated_train_plan_type(::std::string* train_plan_type) {
  if (train_plan_type != NULL) {
    set_has_train_plan_type();
  } else {
    clear_has_train_plan_type();
  }
  train_plan_type_.SetAllocatedNoArena(&::caffe2::PredictorConsts::_default_train_plan_type_.get(), train_plan_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe2_2fproto_2fpredictor_5fconsts_2eproto__INCLUDED
